;;; generated by vmt2mcmt.py on Thu May 10 20:20:46 2018.
;;; run sally with option --lsal-extensions
(define-state-type state_type
(
   (v1 Int)
   (v2 Real)
   (v3 Int)
   (v4 Real)
   (v5 Int)
   (v6 Real)
   (v7 Int)
   (v8 Real)
   (v9 Int)
   (v10 Int)
   (v11 Real)
   (v12 Int)
   (v13 Real)
   (v14 Int)
   (v15 Real)
   (v16 Int)
   (v17 Int)
   (v18 Int)
   (v19 Int)
   (v20 Real)
   (v21 Int)
   (v22 Int)
   (v23 Int)
   (v24 Real)
   (v25 Int)
   (v26 Real)
   (v27 Int)
   (v28 Int)
   (v29 Int)
   (v30 Int)
   (v31 Int)
   (v32 Int)
   (v33 Real)
   (v34 Real)
   (v35 Real)
   (v36 Real)
   (v37 Real)
   (v38 Real)
   (v39 Real)
   (v40 Real)
   (v41 Real)
   (v42 Real)
   (v43 Real)
   (v44 Real)
   (v45 Real)
   (v46 Real)
   (v47 Real)
   (v48 Real)
   (v49 Real)
   (v50 Real)
   (v51 Real)
   (v52 Real)
   (v53 Real)
   (v54 Real)
   (v55 Real)
   (v56 Real)
   (v57 Real)
   (v58 Real)
   (v59 Real)
   (v60 Real)
   (v61 Real)
   (v62 Real)
   (v63 Real)
   (v64 Real)
   (v65 Bool)
   (v66 Bool)
   (v67 Bool)
   (v68 Real)
   (v69 Real)
   (v70 Real)
   (v71 Real)
   (v72 Real)
   (v73 Real)
   (v74 Real)
   (v75 Real)
   (v76 Real)
   (v77 Real)
   (v78 Real)
   (v79 Real)
   (v80 Real)
   (v81 Real)
   (v82 Real)
   (v83 Real)
   (v84 Real)
   (v85 Real)
   (v86 Int)
   (v87 Int)
   (v88 Real)
   (v89 Real)
   (v90 Int)
   (v91 Int)
   (v92 Real)
   (v93 Real)
   (v94 Real)
   (v95 Real)
   (v96 Real)
   (v97 Real)
   (v98 Real)
   (v99 Real)
   (v100 Real)
   (v101 Int)
   (v102 Int)
   (v103 Int)
   (v104 Int)
   (v105 Int)
   (v106 Int)
   (v107 Int)
   (v108 Int)
   (v109 Int)
   (v110 Int)
   (v111 Int)
))
;;
;; Initial states
;;
(define-states initial_states state_type 
   (and (not v65) (and (not v66) (not v67))))
;;
;; Transition relation
;;
(define-transition transition state_type 
   (and (or  (and (and (and (not v65) (and v66 (not v67))) (and (and (not v67') v66') (not v65'))) (and (=  v68 v68') (and (=  v69 v69') (and (=  v70 v70') (and (=  v71 v71') (and (=  v72 v72') (and (=  v73 v73') (and (=  v74 v74') (and (=  v75 v75') (and (=  v76 v76') (and (=  v77 v77') (and (=  v78 v78') (and (=  v79 v79') (and (=  v80 v80') (and (=  v81 v81') (and (=  v82 v82') (and (=  v83 v83') (and (=  v84 v84') (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (=  v85 v85') (and (=  v86 v86') (=  v87 v87'))) (=  v88 v88')) (=  v89 v89')) (=  v90 v90')) (=  v91 v91')) (=  v92 v92')) (=  v93 v93')) (=  v94 v94')) (=  v95 v95')) (=  v96 v96')) (=  v97 v97')) (=  v98 v98')) (=  v99 v99')) (=  v100 v100')) (=  v101 v101')) (=  v102 v102')) (=  v103 v103')) (=  v104 v104')) (=  v105 v105')) (=  v106 v106')) (=  v107 v107')) (=  v108 v108')) (=  v109 v109')) (=  v110 v110')) (=  v111 v111')))))))))))))))))))) (or  (and (and (and (not v65) (and (not v66) (not v67))) (and (not v65') (and v67' (not v66')))) (and (=  v68' 0) (and (=  v69' 0) (and (=  v70' 0) (and (=  v71' 0) (and (=  v72' 0) (and (=  v73' 0) (and (=  v74' 0) (and (=  v75' 0) (and (=  v76' 0) (and (=  v77' 0) (and (=  v78' 0) (and (=  v79' 0) (and (=  v80' 0) (and (=  v81' 0) (and (=  v82' 0) (and (=  v83' 0) (and (=  v84' 0) (and (=  v111' 0) (and (=  v110' 1) (and (=  v109' 0) (and (=  v108' 0) (and (=  v107' 0) (and (=  v106' 0) (and (=  v105' 1) (and (=  v104' 0) (and (=  v103' 1) (and (=  v102' 1) (and (=  v101' 1) (and (=  v100' 1) (and (=  v99' 0) (and (=  v98' 0) (and (=  v97' 1) (and (=  v96' 0) (and (=  v95' 0) (and (=  v94' 5) (and (=  v93' 5) (and (=  v92' 0) (and (=  v91 v91') (and (=  v90 v90') (and (=  v89 v89') (and (=  v88' 0) (and (=  v85' 0) (and (=  v86' 0) (=  v87' 0))))))))))))))))))))))))))))))))))))))))))))) (or  (and (and (and (and (not v67') v66') (not v65')) (and (not v65) (and (not v66) v67))) (and (or  (and (=  (+  v8 (+  v39 (*  (- 1) v40))) 0) (not (<= v40 v39))) (and (<= v40 v39) (=  (+  v8 (+  (*  (- 1) v39) v40)) 0))) (and (=  v110 0) (and (=  v68' v15) (and (=  v69' v13) (and (=  v70' v44) (and (=  v71' v43) (and (=  v72' v42) (and (=  v73' v35) (and (=  v74' v37) (and (=  v75' v41) (and (=  v76' v20) (and (=  v77' v40) (and (=  v78' v39) (and (=  v79' v11) (and (=  v80' v4) (and (=  v81' v6) (and (=  v82' v26) (and (=  v83' v24) (and (=  v84' v2) (and (=  v111 v111') (and (=  v110 v110') (and (=  v109 v109') (and (=  v108 v108') (and (=  v107 v107') (and (=  v106 v106') (and (=  v105 v105') (and (=  v104 v104') (and (=  v103 v103') (and (=  v102 v102') (and (=  v101 v101') (and (=  v100 v100') (and (=  v99 v99') (and (=  v98 v98') (and (=  v97 v97') (and (=  v96 v96') (and (=  v95 v95') (and (=  v94 v94') (and (=  v93 v93') (and (=  v92 v92') (and (=  v91 v91') (and (=  v90 v90') (and (=  v89 v89') (and (=  v88 v88') (and (=  v85' v92) (and (=  v87' v1) (=  v86' v10))))))))))))))))))))))))))))))))))))))))))))))) (and (and (and (not v65) (and (not v66) v67)) (and (not v65') (and v67' (not v66')))) (and (or  (and (=  (+  v8 (+  v39 (*  (- 1) v40))) 0) (not (<= v40 v39))) (and (<= v40 v39) (=  (+  v8 (+  (*  (- 1) v39) v40)) 0))) (and (not (=  v12 0)) (and (not (=  v14 0)) (and (or  (and (=  (+  v43 v63) 0) (<= v43 0)) (and (=  v43 v63) (not (<= v43 0)))) (and (or  (and (=  (+  (*  2 v39) (+  (*  (- 2) v40) (*  (- 25) v64))) 0) (not (=  v16 0))) (and (=  v64 0) (=  v16 0))) (and (or  (and (=  v62 v64) (not (<= (+  v63 v64) (- 10)))) (and (<= (+  v63 v64) (- 10)) (=  (+  v63 v62) (- 10)))) (and (or  (and (=  (+  v61 (*  (- 1) v63)) 10) (not (<= (- 10) (+  v63 (*  (- 1) v62))))) (and (<= (- 10) (+  v63 (*  (- 1) v62))) (=  v61 v62))) (and (or  (and (=  (+  (*  20 v98) (+  v60 (*  (- 20) v61))) 0) (not (<= 0 (+  v89 (+  (*  20 v98) (*  (- 20) v61)))))) (and (<= 0 (+  v89 (+  (*  20 v98) (*  (- 20) v61)))) (=  v89 v60))) (and (or  (and (=  v56 v60) (<= v60 (/ 16 5))) (and (=  v56 (/ 16 5)) (not (<= v60 (/ 16 5))))) (and (or  (or  (or  (and (=  (+  v38 (+  (*  (- 1) v43) (+  (*  (- 1) (*  v100 v43)) (+  (*  (- 1) v56) (*  (- 1) v59))))) 0) (and (not (=  v99 0)) (and (=  v16 0) (or  (and (=  (+  v98 (+  (*  (- 1) v43) v59)) 0) (=  v17 0)) (and (=  v59 0) (not (=  v17 0))))))) (and (=  (+  v38 (+  (*  (- 1) v43) (+  (*  (- 1) (*  v100 v43)) (+  (*  (- 1) v56) (*  (- 1) v58))))) 0) (and (not (=  v99 0)) (and (=  v16 0) (or  (and (=  (+  v98 (+  (*  (- 1) v43) v58)) 0) (=  v17 0)) (and (=  v58 0) (not (=  v17 0)))))))) (and (=  (+  v38 (+  (*  (- 1) v43) (+  (*  (- 1) (*  v100 v43)) (+  (*  (- 1) v56) (*  (- 1) v57))))) 0) (and (not (=  v99 0)) (and (=  v16 0) (or  (and (=  (+  v98 (+  (*  (- 1) v43) v57)) 0) (=  v17 0)) (and (=  v57 0) (not (=  v17 0)))))))) (and (=  (+  v38 (+  (*  (- 1) v43) (+  (*  (- 1) v55) (+  (*  (- 1) (*  v100 v43)) (*  (- 1) v56))))) 0) (and (not (=  v99 0)) (and (=  v16 0) (or  (and (=  (+  v98 (+  (*  (- 1) v43) v55)) 0) (=  v17 0)) (and (=  v55 0) (not (=  v17 0)))))))) (and (or  (and (=  (+  (*  8439 v42) (*  (- 5000) v53)) 0) (not (<= v42 (/ 1 16878)))) (and (<= v42 (/ 1 16878)) (=  v53 (/ 1 10000)))) (and (and (or  (=  v54 0) (=  v98 (*  v33 v54))) (or  (and (=  v54 v53) (<= v53 1000)) (and (=  v54 1000) (not (<= v53 1000))))) (and (or  (and (=  (+  (*  2500000000 v36) (*  (- 1167699003723) v44)) 0) (not (<= 0 (+  (*  2500000000 v13) (+  (*  (- 143239500000) v33) (+  (*  1167699003723 v44) (*  (- 2500000000) v15))))))) (and (<= 0 (+  (*  2500000000 v13) (+  (*  (- 143239500000) v33) (+  (*  1167699003723 v44) (*  (- 2500000000) v15))))) (or  (and (=  (+  (*  2500000000 v36) (*  1167699003723 v44)) 0) (not (<= (+  (*  2500000000 v13) (+  (*  (- 143239500000) v33) (+  (*  (- 1167699003723) v44) (*  (- 2500000000) v15)))) 0))) (and (<= (+  (*  2500000000 v13) (+  (*  (- 143239500000) v33) (+  (*  (- 1167699003723) v44) (*  (- 2500000000) v15)))) 0) (=  (+  (*  5000 v13) (+  (*  (- 286479) v33) (+  (*  5000 v36) (*  (- 5000) v15)))) 0))))) (and (and (not (=  v18 0)) (and (not (=  v111 0)) (=  v18 0))) (and (or  (and (=  v26 0) (=  v26 v34)) (and (not (=  v26 0)) (or  (and (or  (and (and (<= v20 350) (and (and (<= v20 120) (or  (and (=  v45 0) (<= v20 120)) (and (=  (+  (*  7 v20) (*  2300 v45)) 3140) (not (<= v20 120))))) (and (not (<= v20 350)) (<= v20 500)))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v45 v19))))) (or  (or  (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v46 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v46)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v46 v19))))) (or  (or  (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v47 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v47)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v47 v19))))) (or  (or  (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v48 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v48)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v48 v19))))) (or  (or  (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v49 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v49)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v49 v19))))) (or  (or  (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v50 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v50)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v50 v19))))) (or  (or  (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v51 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v51)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v51 v19))))) (or  (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v52 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v52)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v52 v19))))) (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v51 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v51)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v51 v19))))))) (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v50 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v50)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v50 v19))))))) (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v49 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v49)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v49 v19))))))) (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v48 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v48)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v48 v19))))))) (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v47 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v47)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v47 v19))))))) (and (and (<= v20 350) (and (and (not (<= v20 350)) (<= v20 500)) (and (<= v20 120) (or  (and (<= v20 120) (=  v46 0)) (and (not (<= v20 120)) (=  (+  (*  7 v20) (*  2300 v46)) 3140)))))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v46 v19))))))) (and (and (<= v20 350) (and (and (<= v20 120) (or  (and (=  v45 0) (<= v20 120)) (and (=  (+  (*  7 v20) (*  2300 v45)) 3140) (not (<= v20 120))))) (and (not (<= v20 350)) (<= v20 500)))) (=  v34 (*  (+  (*  (- 1) (*  2 (+  (*  (- 1) v37) (+  v96 (*  (- 1) (*  (/ 7 5) v13)))))) (*  (/ 1 2) (+  v35 (*  (- 1) (*  (/ 1 16) v95))))) (+  (/ 3 10) (+  v45 v19))))))) (or  (not (=  v9 0)) (not (=  v16 0)))) (and (=  v34 0) (not (or  (not (=  v9 0)) (not (=  v16 0)))))))) (and (not (=  v21 0)) (and (not (=  v22 0)) (and (not (=  v23 0)) (and (not (=  v25 0)) (and (=  v68' v15) (and (=  v69' v13) (and (=  v70' v44) (and (=  v71' v43) (and (=  v72' v42) (and (=  v73' v35) (and (=  v74' v37) (and (=  v75' v41) (and (=  v76' v20) (and (=  v77' v40) (and (=  v78' v39) (and (=  v79' v11) (and (=  v80' v4) (and (=  v81' v6) (and (=  v82' v26) (and (=  v83' v24) (and (=  v84' v2) (and (and (and (and (and (and (and (and (and (and (and (and (=  v100' 0) (and (and (=  v98' v38) (and (=  v97' 0) (and (=  (+  (*  5 v96) (+  (*  5 v96') (+  (*  (- 14) v13) (+  (*  (- 10) v37) (+  (*  (- 5) (*  v97 (+  (*  (/ 7 5) v13) v37))) (*  (- 5) v36)))))) 0) (and (=  (+  (*  799 v95) (+  (*  (- 800) v95') (*  16 v35))) 0) (and (=  v93 v94') (and (=  (+  (*  5 v93') (+  (*  (- 5) v96) (*  7 v13))) 0) (and (=  v92 v92') (and (=  v91 v91') (and (=  v90 v90') (and (=  v89 v89') (and (=  v88' v34) (and (=  v85' v92) (and (=  v87' v1) (=  v86' v10)))))))))))))) (=  v99' v17))) (=  v101' v28)) (=  v102' v29)) (=  v103' v30)) (=  v104' v10)) (=  v105' v31)) (=  v106' v3)) (=  v107' v5)) (=  v108' v1)) (=  v109' v10)) (=  v110' v32)) (=  v111' v18)))))))))))))))))))))))))))))))))))))))))) (and (or  (or  (and (not (<= (+  (*  5 v94) (+  (*  (- 5) v96) (*  7 v13))) 0)) (not (<= v33 0))) (or  (and (not (<= 0 (+  (*  5 v94) (+  (*  (- 5) v96) (*  7 v13))))) (not (<= 0 v33))) (=  v33 0))) (=  v32 0)) (and (or  (not (or  (and (not (<= (+  (*  5 v94) (+  (*  (- 5) v96) (*  7 v13))) 0)) (not (<= v33 0))) (or  (and (not (<= 0 (+  (*  5 v94) (+  (*  (- 5) v96) (*  7 v13))))) (not (<= 0 v33))) (=  v33 0)))) (=  v32 1)) (and (or  (not (and (not (=  v91 0)) (not (=  v109 0)))) (=  v31 0)) (and (or  (and (not (=  v91 0)) (not (=  v109 0))) (=  v31 1)) (and (or  (not (and (not (=  v107 0)) (=  v27 0))) (=  v30 0)) (and (or  (and (not (=  v107 0)) (=  v27 0)) (=  v30 1)) (and (or  (not (and (not (=  v106 0)) (=  v27 0))) (=  v29 0)) (and (or  (and (not (=  v106 0)) (=  v27 0)) (=  v29 1)) (and (or  (not (and (not (=  v108 0)) (=  v27 0))) (=  v28 0)) (and (or  (and (not (=  v108 0)) (=  v27 0)) (=  v28 1)) (and (or  (or  (not (=  v24 0)) (not (=  v26 0))) (=  v27 0)) (and (or  (not (or  (not (=  v24 0)) (not (=  v26 0)))) (=  v27 1)) (and (or  (=  v26 0) (=  v25 0)) (and (or  (not (=  v26 0)) (=  v25 1)) (and (or  (=  v24 0) (=  v23 0)) (and (or  (not (=  v24 0)) (=  v23 1)) (and (or  (not (=  v4 0)) (=  v22 0)) (and (or  (=  v4 0) (=  v22 1)) (and (or  (=  v6 0) (=  v21 0)) (and (or  (not (=  v6 0)) (=  v21 1)) (and (or  (<= 0 v20) (=  v19 0)) (and (or  (not (<= 0 v20)) (=  v19 1)) (and (or  (=  v9 0) (=  v18 0)) (and (or  (not (=  v9 0)) (=  v18 1)) (and (or  (=  v16 0) (=  v17 0)) (and (or  (not (=  v16 0)) (=  v17 1)) (and (or  (and (not (=  v5 0)) (or  (=  v3 0) (not (=  v7 0)))) (=  v16 0)) (and (or  (not (and (not (=  v5 0)) (or  (=  v3 0) (not (=  v7 0))))) (=  v16 1)) (and (or  (and (not (<= v15 1)) (not (<= 10 v15))) (=  v14 0)) (and (or  (not (and (not (<= v15 1)) (not (<= 10 v15)))) (=  v14 1)) (and (or  (=  (+  (*  5 v93) (*  (- 7) v13)) 0) (=  v12 0)) (and (or  (not (=  (+  (*  5 v93) (*  (- 7) v13)) 0)) (=  v12 1)) (and (or  (not (and (not (=  v105 0)) (not (or  (not (=  v11 0)) (and (=  v104 0) (not (=  v9 0))))))) (=  v10 0)) (and (or  (and (not (=  v105 0)) (not (or  (not (=  v11 0)) (and (=  v104 0) (not (=  v9 0)))))) (=  v10 1)) (and (or  (and (not (=  v3 0)) (not (and (not (=  v5 0)) (not (=  v7 0))))) (=  v9 0)) (and (or  (not (and (not (=  v3 0)) (not (and (not (=  v5 0)) (not (=  v7 0)))))) (=  v9 1)) (and (or  (<= v8 200) (=  v7 0)) (and (or  (not (<= v8 200)) (=  v7 1)) (and (or  (not (and (not (=  v103 0)) (=  v6 0))) (=  v5 0)) (and (or  (and (not (=  v103 0)) (=  v6 0)) (=  v5 1)) (and (or  (not (and (not (=  v102 0)) (=  v4 0))) (=  v3 0)) (and (or  (and (not (=  v102 0)) (=  v4 0)) (=  v3 1)) (and (or  (and (not (=  v101 0)) (=  v2 0)) (=  v1 1)) (or  (not (and (not (=  v101 0)) (=  v2 0))) (=  v1 0)))))))))))))))))))))))))))))))))))))))))))))))
;;
;; Transition system
;;
(define-transition-system T state_type 
  initial_states
  transition
)
;;
;; Property
;;
(query T 
   (not (and (not v65) (and v66 (not v67))))
)
